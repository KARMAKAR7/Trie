# Intuition
<!-- Describe your first thoughts on how to solve this problem. -->

# Approach
<!-- Describe your approach to solving the problem. -->

# Complexity
- Time complexity:
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity:
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```
class TrieNode{
    public:
    char data;
    bool isTerminal;
    TrieNode*childreen[26];

    TrieNode(char ch):data(ch), isTerminal(false){
        for(int i = 0;i<26 ;i++){
            childreen[i]=0;
        }
    }

};
class Trie {
    TrieNode*root;
     void insertUtill(TrieNode*root ,string& word , int i ){
         if(i >=word.size()){
             root->isTerminal = 1;
             return;
         }
         int index = word[i] -'a';
         if(!root->childreen[index]){
             root->childreen[index] = new TrieNode(word[i]);
         }
         insertUtill(root->childreen[index] , word , i+1);
     }

    bool SerchUtil(TrieNode*root ,string& word , int i ){
       if(i >= word.size()){
           return root->isTerminal;
       }
       int index = word[i]-'a';
       if(root->childreen[index])
           return SerchUtil(root->childreen[index] , word , i+1);
       
     return false;
    }

    
    bool StarUtil(TrieNode*root ,string& word , int i ){
       if(i >= word.size()){
           return true;
       }
       int index = word[i]-'a';
       if(root->childreen[index])
           return StarUtil(root->childreen[index] , word , i+1);
       
     return false;
    }

public:
    Trie() {
        root = new TrieNode('\0');
    }
    
    void insert(string word) {
        insertUtill(root ,word,0);
    }
    
    bool search(string word) {
       return SerchUtil(root , word , 0);
    }
    
    bool startsWith(string prefix) {
        return StarUtil(root , prefix , 0);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
