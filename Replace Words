class TrieNode{
    public:
    char data;
    bool isTerminal;
    TrieNode*childreen[26];

    TrieNode(char ch):data(ch), isTerminal(false){
        for(int i = 0;i<26 ;i++){
            childreen[i]=0;
        }
    }

};
class Trie {
    TrieNode*root;
     void insertUtill(TrieNode*root ,string& word , int i ){
         if(i >=word.size()){
             root->isTerminal = 1;
             return;
         }
         int index = word[i] -'a';
         if(!root->childreen[index]){
             root->childreen[index] = new TrieNode(word[i]);
         }
         insertUtill(root->childreen[index] , word , i+1);
     }

    bool SerchUtil(TrieNode*root ,string& word , int& i ){
      if(root ->isTerminal) return true;
       if(i >= word.size()){
           return root->isTerminal;
       }
       int index = word[i++]-'a';
       if(root->childreen[index])
           return SerchUtil(root->childreen[index] , word , i);
       
     return false;
    }

    
    bool StarUtil(TrieNode*root ,string& word , int i ){
      
       if(i >= word.size()){
           return true;
       }
       int index = word[i]-'a';
       if(root->childreen[index])
           return StarUtil(root->childreen[index] , word , i+1);
       
     return false;
    }

public:
    Trie() {
        root = new TrieNode('\0');
    }
    
    void insert(string word) {
        insertUtill(root ,word,0);
    }
    
    int search(string word) {
        int i = 0;
    
       bool gotIt = SerchUtil(root , word , i);
       return gotIt ? i:-1;
    }
    
    bool startsWith(string prefix) {
        return StarUtil(root , prefix , 0);
    }
};

class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        string ans;
        Trie trie;
        // indert dist in trie
        for(auto root:dictionary){
            trie.insert(root);
        }

        //pick each word and find in trie wethere root is avalaiable or not
         int s = 0 , e = 0;

         while(e<sentence.size()){
           if(sentence[e]==' '|| e == sentence.size()-1){
               int len =e == sentence.size()-1 ? sentence.size():e-s;
               string word = sentence.substr(s,len);
               int trieMatchIndex = trie.search(word);

           
               ans +=trieMatchIndex != -1 ? word.substr(0,trieMatchIndex):word;
               if(sentence[e]==' '){
                   ans+= " ";
               }
               s = e+1;
           }
           e++;

         }
         return ans;
    }
};
